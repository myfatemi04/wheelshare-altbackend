datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String?
  groups      Group[]       @relation(references: [id])
  signups     EventSignup[]
  // Invitations to carpools and active requests.
  invitations Invitation[]

  carpools         Carpool[]
  groupsAsAdmin    Group[]   @relation("admins", references: [id])
  carpoolsICreated Carpool[] @relation("carpool_creator")
  eventsICreated   Event[]   @relation("event_creator")
}

model Invitation {
  // If this is a request, this is the user requesting to join the carpool
  // If this is an invitation, this is the user being invited
  // userId and carpoolId will be enough to distinguish between Invitations
  user   User @relation(fields: [userId], references: [id])
  userId Int

  carpool   Carpool @relation(fields: [carpoolId], references: [id])
  carpoolId Int

  // If true, a user requested to join the carpool
  isRequest Boolean

  // When the invitation was first sent
  sentTime DateTime

  @@id([userId, carpoolId])
}

model Carpool {
  id          Int          @id @default(autoincrement())
  // Default "creatorName's carpool"
  name        String
  members     User[]
  invitations Invitation[]
  creatorId   Int
  creator     User         @relation("carpool_creator", fields: [creatorId], references: [id])

  note String @default("")

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int
}

model Group {
  id       Int     @id @default(autoincrement())
  name     String
  users    User[]  @relation(references: [id])
  admins   User[]  @relation("admins", references: [id])
  events   Event[]
  joinCode String?
}

model Event {
  id      Int    @id @default(autoincrement())
  name    String
  groupId Int?
  group   Group? @relation(fields: groupId, references: [id])

  creatorId Int
  creator   User @relation("event_creator", fields: creatorId, references: [id])

  startTime DateTime
  duration  Int // Minutes

  // Default at startTime + duration
  endTime DateTime

  // 00100000 & daysOfWeek = 00100000 !== 0 --> Mondays
  // 0SMTWTFS
  daysOfWeek Int

  description String @default("")

  placeId          String
  formattedAddress String
  latitude         Float
  longitude        Float

  signups  EventSignup[]
  carpools Carpool[]

  cancelled Boolean @default(false)
}

model EventSignup {
  eventId Int
  event   Event @relation(fields: eventId, references: [id])
  userId  Int
  user    User  @relation(fields: userId, references: [id])

  canDrive Boolean @default(false)

  placeId          String?
  formattedAddress String?
  latitude         Float?
  longitude        Float?

  note String @default("")

  @@id([eventId, userId])
}
